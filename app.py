"""Created on Mon May 18 22:19:58 2020@author: bensonsmathew"""from flask import Flask, render_template, request, sessionfrom flask_session.__init__ import Sessionfrom datetime import datetimeimport sqlite3import socketfrom sqlalchemy import create_enginefrom sqlalchemy.orm import scoped_session, sessionmakerimport pandas as pdhostname = socket.gethostname()    IPAddr = socket.gethostbyname(hostname)print(f"Goto:\nhttp://{IPAddr}:5000\n")engine = create_engine('sqlite:///employee.db')db = scoped_session(sessionmaker(engine))dept = {i[1]:i[0] for i in db.execute('select * from department')}class employee_cl:    "Class to store employee details"    def __init__(self, e_num, dept_id, first, last, title, shift, days_off, fte):        self.e_num = e_num        self.dept_id = dept_id        self.first = first        self.last = last        self.title = title        self.shift = shift        self.days_off = days_off        self.fte = fte        @property    def fullname(self)->str:        "Returns the full name of the emplyoee"        return f'{self.last.capitalize()}, {self.first.capitalize()}'        @property    def create_emp(self):        'Addes the emplyoee to the database'        # conn = sqlite3.connect('employee.db')        # c = conn.cursor()        global dept        print(self.dept_id)        print(dept)        try:            dep = dept[self.dept_id]        except:            return 'department selected does not exist.'        uniq_id = str(dep)+self.e_num        try:            db.execute(f"""                      insert into employee (uniq_id, dept_id, emp_id, first_name, last_name, title,                                            shift, days_off, fte, create_time, modify_time, create_by,                                            modify_by, del_ind) values                      (:uniq_id, :dept_id, :emp_id, :first_name, :last_name, :title, :shift, :days_off,                       :fte, :create_time, :modify_time, :create_by, :modify_by, :del_ind);                      """,{'uniq_id':uniq_id, 'dept_id':dep,                      'emp_id':self.e_num, 'first_name':self.first, 'last_name':self.last,                      'title':self. title, 'shift':self.shift, 'days_off':self.days_off,                      'fte':self.fte, 'create_time':datetime.now(), 'modify_time':datetime.now(),                      'create_by':'Admin', 'modify_by':'Admin', 'del_ind':'n'})            db.commit()            return 'success'        except:            return 'person already in the system.'                           app = Flask(__name__)app.config['SESSION_PERMANENT'] = Falseapp.config['SESSION_TYPE'] = 'filesystem'Session(app)@app.route('/', methods=['POST','GET'])def index():    if session.get('notes') is None:        session['notes'] = []    if request.method == 'POST':        note = request.form.get('note')        print(note)        session['notes'].append(note)        print(session['notes'])    return render_template('hello.html', notes=session['notes'])@app.route('/employee')def employee():    global dept    names = ['Zen','Chopin', 'Beeth']    return render_template("EmployeePage.html", names=names, dept=dept)@app.route('/employeesubmit', methods=['GET','POST'])def emp_submit():    if request.method == 'GET':        return 'Please submit the form.'    e_num = request.form.get('e_num')    dept_id = request.form.get('dept_id')    last = request.form.get('last')    first = request.form.get('first')    title = request.form.get('job_title')    shift = request.form.get('shift')    days_off = request.form.getlist('days_off')    fte = request.form.get('fte')    days_off = ','.join(i for i in days_off)    emp = employee_cl(e_num, dept_id, last, first, title, shift, days_off, fte)    result = emp.create_emp    name = emp.fullname    if result == 'success':        return render_template('EmployFormSubmit.html', name=name)    else:        return render_template('SubmitError.html', name=name, result=result)@app.route('/EmpSearch', methods=['GET','POST'])def EmpSearch():    emp_dtl = request.form.get('emp_dtl')        try:        sql = """select * from employee where emp_id like '%:emp_dtl%'         or first_name like '%:emp_dtl%'         or last_name like '%:emp_dtl%'         """        emp_list = db.execute(sql, {'emp_dtl':emp_dtl})    except:        emp_list = db.execute('select * from employee')    return render_template('EmpSearch.html', items=emp_list)